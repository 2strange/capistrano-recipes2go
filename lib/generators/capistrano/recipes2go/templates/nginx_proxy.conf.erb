###
### Nginx Proxy Server Config generated with capistrano-recipes2go at: <%= Time.now.strftime("%Y-%m-%d .. %H:%M .. %Z") %>
###
# This server acts as the public-facing entry point, handling SSL termination,
# domain redirects, and passing requests to the internal App Nginx server.


# Upstream for the Internal App Nginx Server
# This is where your App Nginx (e.g., in a Docker container or on a separate VM) listens.
upstream app_<%= fetch(:application) %>_<%= fetch(:stage) %>_app_server {
  server <%= fetch(:nginx_upstream_app_host) %>:<%= fetch(:nginx_upstream_app_port) %>;
  # If you have multiple app servers, you'd list them here:
  # server 10.0.0.6:4550;
  # server 10.0.0.7:4550;
}


<% if fetch(:nginx_use_ssl, false) && !fetch(:nginx_also_allow_http, false) %>
# Redirect HTTP to HTTPS (only if HTTP is not allowed directly)
server {
  listen 80;
  listen [::]:80;

  server_name <%= nginx_all_domains_with_www.join(joiner) %>;
  <% if fetch(:nginx_major_domain) %>
  return 301 https://<%= nginx_major_domain %>$request_uri;
  <% else %>
  return 301 https://$host$request_uri;
  <% end %>
}
<% end %>


<% if fetch(:nginx_major_domain) %>
<% if fetch(:nginx_use_ssl) %>

<% if fetch(:nginx_also_allow_http, false) %>
# Redirect HTTP to HTTPS (if HTTP is also allowed)
server {
  listen 80;
  listen [::]:80;

  server_name <%= nginx_all_domains_with_www.join(joiner) %>;
  return 301 https://<%= nginx_major_domain %>$request_uri;
}
<% end %>
# Redirect old domains to major (HTTPS)
server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  ssl_certificate       <%= fetch(:nginx_other_ssl_cert) %>;
  ssl_certificate_key   <%= fetch(:nginx_other_ssl_key) %>;

  <%= render2go("nginx/https_ssl_options") %> # SSL options are only on the proxy

  server_name           <%= nginx_domains.join(joiner) %>;
  return 301 https://<%= nginx_major_domain %>$request_uri;
}
<% else %>
# Redirect old domains to major (HTTP)
server {
  listen 80;
  listen [::]:80;

  server_name           <%= nginx_domains.join(joiner) %>;
  return 301 http://<%= nginx_major_domain %>$request_uri;
}
<% end %>
<% end %>



<% if fetch(:nginx_also_allow_http, false) && fetch(:nginx_use_ssl, false) %>
# Main HTTP Server Block (Proxying to App Server)
server {
  listen 80;
  listen [::]:80;

  <% if fetch(:nginx_remove_www) %>
  ## Remove "www" from URLs
  if ($host ~* ^www\.(?<domain>.*)) {  return 301 <%= fetch(:nginx_use_ssl) ? "https" : "http" %>://$domain$request_uri;  }
  <% end %>

  <% if fetch(:nginx_major_domain) %>
  server_name <%= fetch(:nginx_major_domain).gsub(/^\*?\./, "") %>;
  <% else %>
  server_name <%= nginx_domains_with_www.join(joiner) %>;
  <% end %>

  access_log <%= fetch(:nginx_proxy_log_folder) %>/nginx-access.log;
  error_log  <%= fetch(:nginx_proxy_log_folder) %>/nginx-error.log;

  # Certbot validation for Let's Encrypt
  <% if fetch(:allow_well_known_proxy) %>
  location ~ /.well-known/ {
    allow all;
    root <%= fetch(:nginx_proxy_well_known_root) %>;
  }
  <% end %>

  # Pass all other requests to the internal App Nginx server
  location / {
    proxy_set_header X-Real-IP          $remote_addr;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme; # Important: pass 'http' or 'https'
    proxy_set_header Host               $host;   # Important: pass original host header
    proxy_redirect    off;
    proxy_pass        http://app_<%= fetch(:application) %>_<%= fetch(:stage) %>_app_server;
    # No `try_files` here, let the app server handle static files and routing.
  }
}
<% end %>


<% if fetch(:nginx_use_ssl) %>
# Main SSL Server Block (Proxying to App Server)
server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  ssl_certificate     <%= fetch(:nginx_ssl_cert) %>;
  ssl_certificate_key <%= fetch(:nginx_ssl_key) %>;

  <%= render2go("nginx/https_ssl_options") %> # SSL options are only on the proxy
<% else %>
# Main HTTP Server Block (Proxying to App Server - no SSL)
server {
  listen 80;
  listen [::]:80;
<% end %>

  <% if fetch(:nginx_remove_www) %>
  ## Remove "www" from URLs
  if ($host ~* ^www\.(?<domain>.*)) {
    return 301 <%= fetch(:nginx_use_ssl) ? "https" : "http" %>://$domain$request_uri;
  }
  <% end %>

  <% if fetch(:nginx_major_domain) %>
  server_name <%= fetch(:nginx_major_domain).gsub(/^\*?\./, "") %>;
  <% else %>
  server_name <%= nginx_domains_with_www.join(joiner) %>;
  <% end %>

  access_log <%= fetch(:nginx_proxy_log_folder) %>/nginx-access.log;
  error_log  <%= fetch(:nginx_proxy_log_folder) %>/nginx-error.log;

  # Certbot validation for Let's Encrypt
  <% if fetch(:allow_well_known_proxy) %>
  location ~ /.well-known/ {
    allow all;
    root <%= fetch(:nginx_proxy_well_known_root) %>;
  }
  <% end %>

  # Pass all other requests to the internal App Nginx server
  location / {
    proxy_set_header X-Real-IP          $remote_addr;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme; # Important: pass 'http' or 'https'
    proxy_set_header Host               $host;   # Important: pass original host header
    proxy_redirect    off;
    proxy_pass        http://app_<%= fetch(:application) %>_<%= fetch(:stage) %>_app_server;
    # No `try_files` here, let the app server handle static files and routing.
  }
}